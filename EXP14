#include <stdio.h>

int findFloor(int arr[], int low, int high, int target) {
    int floor = -1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        
        if (arr[mid] == target)
            return arr[mid];
        
        if (arr[mid] < target) {
            floor = arr[mid];
            low = mid + 1;
        } 
        else {
            high = mid - 1;
        }
    }
    return floor;
}

int findCeil(int arr[], int low, int high, int target) {
    int ceil = -1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        
        if (arr[mid] == target)
            return arr[mid];
        
        if (arr[mid] > target) {
            ceil = arr[mid];
            high = mid - 1;
        }
        else {
            low = mid + 1;
        }
    }
    return ceil;
}

int findPeak(int arr[], int low, int high) {
    while (low < high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] > arr[mid + 1])
            return arr[mid];
        if (arr[mid] < arr[mid + 1])
            low = mid + 1;
        else
            high = mid;
    }
    return arr[low];
}

int findMinimum(int arr[], int low, int high) {
    while (low < high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] < arr[high])
            high = mid;
        else
            low = mid + 1;
    }
    return arr[low];
}

void bubblesort(int arr[], int n) {  
  int i, j;  
  for (i = 0; i < n - 1; i++) {  
    for (j = 0; j < n - i - 1; j++) {  
      if (arr[j] > arr[j + 1]) {  
        int temp = arr[j];  
        arr[j] = arr[j + 1];  
        arr[j + 1] = temp;  
      }  
    }  
  }  
}  

int main() {
    int arr[] = {56,8,93,34,85,12};
    int n = sizeof(arr) / sizeof(arr[0]);
    bubblesort(arr,n);
    printf("Sorted array is: ");  
    for (int i = 0; i < n; i++) {  
    printf("%d ", arr[i]);  
    }  
    int target = 40;
    
    printf("\n Floor of %d is: %d\n", target, findFloor(arr, 0, n - 1, target));
    printf("Ceil of %d is: %d\n", target, findCeil(arr, 0, n - 1, target));
    printf("Peak element is: %d\n", findPeak(arr, 0, n - 1));
    printf("Minimum element is: %d\n", findMinimum(arr, 0, n - 1));
    
    return 0;
}
