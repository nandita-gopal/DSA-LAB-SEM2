#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* newNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    if (node == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    node->data = data;
    node->next = NULL;
    return node;
}
void append(struct Node** head_ref, int new_data) {
    struct Node* new_node = newNode(new_data);
    if (*head_ref == NULL) {
        *head_ref = new_node;
        return;
    }
    struct Node* last = *head_ref;
    while (last->next != NULL)
        last = last->next;
    last->next = new_node;
}

struct Node* findNthFromEnd(struct Node* head, int n) {
    if (head == NULL || n <= 0)
        return NULL;

    struct Node* fast = head;
    struct Node* slow = head;
    for (int i = 0; i < n; ++i) {
        if (fast == NULL) {
            printf("Invalid value of N.\n");
            exit(1);
        }
        fast = fast->next;
    }

    while (fast != NULL) {
        fast = fast->next;
        slow = slow->next;
    }

    return slow;
}

void printList(struct Node* node) {
    while (node != NULL) {
        printf("%d ", node->data);
        node = node->next;
    }
    printf("\n");
}

int main() {
    struct Node* head = NULL;

    append(&head, 1);
    append(&head, 2);
    append(&head, 3);
    append(&head, 4);
    append(&head, 5);

    printf("Linked List: ");
    printList(head);

    int N = 2;
    struct Node* nthNode = findNthFromEnd(head, N);
    if (nthNode != NULL)
        printf("The %dth node from the end is: %d\n", N, nthNode->data);
    else
        printf("Invalid value of N or linked list is too short.\n");

    return 0;
}
